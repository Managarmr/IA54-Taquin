package utbm.ia54.projet.message

import java.util.ArrayList
import java.util.UUID

//initialize messages
event PlacedOn {
	var idPlace : UUID 
	new (id : UUID){
		this.idPlace = id
	}
}

//synchro messages
event IsEveryoneSynchro

event IsSynchro{
	val tileId : UUID
	new(tileId : UUID){
		this.tileId = tileId
	}
}

event AskSynchroMessage{
	val idTile : UUID
	val tileGoal : Integer
	
	new (id : UUID, pos : Integer) {
		this.idTile = id
		this.tileGoal = pos
	}	
}

event SynchroResponse{
	val idPlace : UUID
	val position : Integer
	new(id : UUID,pos : Integer){
		this.idPlace = id
		this.position = pos
	}
}

//leadership message
event BecomeLeader{
	val tileGoal : int
	new (tileGoal : int){
		this.tileGoal = tileGoal;
	}
}

//exchange messages
event  ExchangeMessage{
	val idPlace : UUID
	val idTile : UUID
	new (idPlace : UUID, idTile : UUID){
		this.idPlace = idPlace
		this.idTile = idTile
	}
}

event ExchangeResponse{
	val idPlace : UUID
	new (idPlace : UUID){
		this.idPlace = idPlace
	}
}

//Path Finding

event FindMessage{
	val src : UUID
	new(src : UUID){
		this.src = src
	}
}

event GradientMessage{
	val askedBy : UUID
	val path : ArrayList<UUID>
	new(askedBy : UUID, path : ArrayList<UUID>){
		this.askedBy = askedBy
		this.path = path
	}
}
//finding path to blank tile messages
event FindBlank extends FindMessage{
	new(src : UUID){
		super(src)
	}
}

event FindGoal extends FindMessage{
	val goal : Integer
	new(src : UUID, goal : Integer){
		super(src)
		this.goal = goal
	}
}


//general
event PathMessage{
	val path : ArrayList<UUID>
	new(path : ArrayList<UUID>){
		this.path = path
	}
}

//Aggression
event AggressionMessage{
	val aggressorID : UUID
	new(aggressorID : UUID){
		this.aggressorID = aggressorID
	}
}

event LeaderAggressionMessage extends AggressionMessage{
	new(aggressorID : UUID){
		super(aggressorID)
	}
}

event FleeAggressionMessage extends AggressionMessage{
	val path : ArrayList<UUID>
	new(aggressorID : UUID, path : ArrayList<UUID>){
		super(aggressorID)
		this.path = path
	}
}

//satisfaction synchronization
event BecomeSatisfied

event SatisfiedResponse

//corner resolution Message
event CornerResolutionMessage{
	val targetGoal : Integer
	val step : Integer
	new(targetGoal : Integer, step : Integer){
		this.targetGoal = targetGoal
		this.step = step
	}
}

//block and unblock messages
event BlockMessage

event BlockResponse

event UnblockMessage

event UnblockResponse

// GUI messages
event AskPosition

event SendPosition {
	val posCase : int
	val posTile : int
	val isLeader : boolean
	val isBlankTile : boolean
	val isAggressed : boolean
	
	new (posCase : int, posTile : int, isLeader : boolean, isBlankTile : boolean, isAggressed : boolean) {
		this.posCase = posCase
		this.posTile = posTile
		this.isLeader = isLeader
		this.isBlankTile = isBlankTile
		this.isAggressed = isAggressed
	}
}

event MoveDone

event KillMessage

