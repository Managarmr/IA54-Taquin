package utbm.ia54.projet.message

import java.util.ArrayList
import java.util.UUID

//initialize messages
event PlacedOn {
	var idPlace : UUID 
	new (id : UUID){
		this.idPlace = id
	}
}

//synchro messages
event IsEveryoneSynchro

event IsSynchro{
	val tileId : UUID
	new(tileId : UUID){
		this.tileId = tileId
	}
}

event AskSynchroMessage{
	val idTile : UUID
	val tileGoal : Integer
	val isLeader : boolean
	
	new (id : UUID, pos : Integer, isLeader : boolean) {
		this.idTile = id
		this.tileGoal = pos
		this.isLeader = isLeader
	}	
}

event SynchroResponse{
	val idPlace : UUID
	val position : Integer
	new(id : UUID,pos : Integer){
		this.idPlace = id
		this.position = pos
	}
}


//leadership message
event BecomeLeader{
	val tileGoal : int
	new (tileGoal : int){
		this.tileGoal = tileGoal;
	}
}


//exchange messages
event  ExchangeMessage{
	val idPlace : UUID
	val idTile : UUID
	new (idPlace : UUID, idTile : UUID){
		this.idPlace = idPlace
		this.idTile = idTile
	}
}

event ExchangeResponse{
	val idPlace : UUID
	new (idPlace : UUID){
		this.idPlace = idPlace
	}
}

//finding path to blank tile messages
event FindBlank{
	val src : UUID
	new(src : UUID){
		this.src = src
	}
}

event BlankGradient{
	val askedBy : UUID
	val path : ArrayList<UUID>
	new(askedBy : UUID, path : ArrayList<UUID>){
		this.askedBy = askedBy
		this.path = path
	}
}


event FindGoal{
	val src : UUID
	val goal : Integer
	new(src : UUID, goal : Integer){
		this.src = src
		this.goal = goal
	}
}

//finding path to goal messages
event GoalGradient{
	val askedBy : UUID
	val path : ArrayList<UUID>
	new(askedBy : UUID, path : ArrayList<UUID>){
		this.askedBy = askedBy
		this.path = path
	}
}


//general
event PathMessage{
	val path : ArrayList<UUID>
	new(path : ArrayList<UUID>){
		this.path = path
	}
}

//Aggression
event AggressionMessage{
	var aggressorID : UUID
}

event LeaderAggressionMessage extends AggressionMessage

event FleeAggressionMessage extends AggressionMessage{
	var path : ArrayList<UUID>
}

event FledMessage{
	val idBlankTile : UUID
	new(idBlankTile : UUID){
		this.idBlankTile = idBlankTile
	}
}

event MoveDone




//TODO Ã  supprimer quand le debug sera fini
event sendFindGoal
event sendFindBlank
event showPath
event LogMessage
event KillMessage

event sendAggro{
	val target : UUID
	new(target : UUID){
		this.target = target
	}
}