package utbm.ia54.projet.message

import java.util.ArrayList
import java.util.UUID

event BroadcastMessage {
	
}

//initialize messages
event PlacedOn {
	val id : UUID 
	new (id : UUID){
		this.id = id
	}
}

//synchro messages
event IsEveryoneSynchro

event IsSynchro{
	var tileId : UUID
	new(tileId : UUID){
		this.tileId = tileId
	}
}

event AskSynchroMessage{
	val id : UUID
	val pos : Integer
	
	new (id : UUID, pos : Integer) {
		this.id = id
		this.pos = pos
	}	
}

event SynchroResponse{
	val id : UUID
	val pos : Integer
	new(id : UUID,pos : Integer){
		this.id = id
		this.pos = pos
	}
}


//leadership message
event BecomeLeader{
	var position : int
	new (tileFinalPosition : int){
		this.position = tileFinalPosition;
	}
}


//exchange messages
event  ExchangeMessage{
	var idPlace : UUID
	var idTile : UUID
	new (idPlace : UUID, idTile : UUID){
		this.idPlace = idPlace
		this.idTile = idTile
	}
}

event ExchangeResponse{
	var idPlace : UUID
	new (idPlace : UUID){
		this.idPlace = idPlace
	}
}

//finding path to blank tile messages
event FindBlank{
	var src : UUID
	new(src : UUID){
		this.src = src
	}
}

event BlankGradient{
	var askedBy : UUID
	var path : ArrayList<UUID>
	new(askedBy : UUID, path : ArrayList<UUID>){
		this.askedBy = askedBy
		this.path = path
	}
}


event FindGoal{
	var src : UUID
	var goal : Integer
	new(src : UUID, goal : Integer){
		this.src = src
		this.goal = goal
	}
}

//finding path to goal messages
event GoalGradient{
	var askedBy : UUID
	var path : ArrayList<UUID>
	new(askedBy : UUID, path : ArrayList<UUID>){
		this.askedBy = askedBy
		this.path = path
	}
}


//general
event PathMessage{
	var path : ArrayList<UUID>
	new(path : ArrayList<UUID>){
		this.path = path
	}
}

//Aggression
event AggressionMessage{
	var aggresseurID : UUID
}

event FleeAggressionMessage extends AggressionMessage{
	var path : ArrayList<UUID>
}

event LeaderAggressionMessage extends AggressionMessage

event FledMessage{
	var idBlankTile : UUID
	new(idBlankTile : UUID){
		this.idBlankTile = idBlankTile
	}
}

event MoveDone




//TODO Ã  supprimer quand le debug sera fini
event sendFindGoal
event sendFindBlank
event showPath
event LogMessage
event KillMessage

event sendAggro{
	var target : UUID
	new(target : UUID){
		this.target = target
	}
}