package utbm.ia54.projet.^agent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.UUID
import utbm.ia54.projet.message.LogMessage
import utbm.ia54.projet.message.TilePlaced

agent EcoNPuzzle {
	
	uses DefaultContextInteractions, Lifecycle, Logging
	
	var size : int
	var globalSpace : OpenEventSpace
	
	on Initialize {
		size = new Integer(occurrence.parameters.get(0) as String)
		var globalSpaceId = UUID.randomUUID
		globalSpace = defaultContext.getOrCreateSpaceWithSpec(
			typeof(OpenEventSpaceSpecification),
			globalSpaceId
		)
		var spaceId = new ArrayList<UUID>
		for(i:0..<size*size){
			spaceId.add(UUID.randomUUID)
		}
		
		var tiles = new ArrayList<UUID>
		var places = new ArrayList<UUID>
		
		var temp = new ArrayList<UUID>
		for(i:1..<size*size+1) {
			//get communication spaces
			temp.clear
			if(i > size){
				temp.add(spaceId.get(i-size-1))
			}
			if(i < size*(size-1)){
				temp.add(spaceId.get(i+size-1))
			}
			if(i%size != 1){
				temp.add(spaceId.get(i-2))
			}
			if(i%size != 0){
				temp.add(spaceId.get(i))
			}
			
			// Create place and tile
			places.add(spawn(EcoPlace, i, spaceId.get(i-1), temp,globalSpaceId))
			tiles.add(spawn(EcoTile, i,globalSpaceId))
		}
		Thread.sleep(1000)
		for(p as UUID : places){
			var t = tiles.get(Math.floor(Math.random * tiles.size) as int)
			globalSpace.emit(new TilePlaced(t), Scopes.addresses(globalSpace.getAddress(p)))
		}
		Thread.sleep(1000)
		globalSpace.emit(new LogMessage)
		// Launch GUI
//		EcoNPuzzleLauncher.launchInterface()
		
		// Stop creating
		killMe
	}
	
	on Destroy{
		
	}
}