package utbm.ia54.projet.^agent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.HashSet
import java.util.UUID
import utbm.ia54.projet.gui.EcoNPuzzleLauncher
import utbm.ia54.projet.message.AskPosition
import utbm.ia54.projet.message.BecomeLeader
import utbm.ia54.projet.message.IsEveryoneSynchro
import utbm.ia54.projet.message.IsSynchro
import utbm.ia54.projet.message.KillMessage
import utbm.ia54.projet.message.MoveDone
import utbm.ia54.projet.message.PlacedOn
import utbm.ia54.projet.message.SendPosition
import utbm.ia54.projet.util.EcoNPuzzleUtils

agent EcoNPuzzle {
	
	uses DefaultContextInteractions
	
	var size : int
	var tiles = new ArrayList<UUID>
	var places = new ArrayList<UUID>
		
//*
	on Initialize {
		size = new Integer(occurrence.parameters.get(0) as String)
		
		initializePuzzle
		
		synchro
		
		EcoNPuzzleLauncher.launchInterface()
		EcoNPuzzleUtils.init(size)
		
		emit(new AskPosition)
		
		
		emit(new BecomeLeader(size))
		
	}	

//initializing
	def initializePuzzle{
		var spacesId = new ArrayList<UUID>
		for(i:0..<size*size){
			spacesId.add(UUID.randomUUID)
		}
		
		for(i:0..<size*size) {
			//get communication spaces
			var temp = new ArrayList<UUID>
			if(i >= size){
				temp.add(spacesId.get(i-size))
			}
			if(i < size*(size-1)){
				temp.add(spacesId.get(i+size))
			}
			if(i%size != 0){
				temp.add(spacesId.get(i-1))
			}
			if(i%size != size-1){
				temp.add(spacesId.get(i+1))
			}
			// Create place and tile
			places.add(spawn(EcoPlace, i+1, size, spacesId.get(i), temp))
			tiles.add(spawn(EcoTile, i+1, size))
		}
		
		while(defaultSpace.participants.size < (size*size*2)+1){
		}
		
		var tempTiles = tiles.clone as ArrayList<UUID>
		for(i:0..<size*size){
			var ind = (Math.random * (tempTiles.size-1)) as int
			var tile = tempTiles.get(ind)
			tempTiles.remove(ind)
//			var tile = tiles.get(i)
			emit(new PlacedOn(places.get(i)), Scopes.addresses(defaultSpace.getAddress(tile)))
		}	
		
	}
	
	//synchronize
	var synchroTiles = new HashSet<UUID>
	
	on IsSynchro{
		synchroTiles.add(occurrence.tileId)
	}
	
	def synchro{
		synchroTiles.clear
		var evt = new IsEveryoneSynchro
		emit(evt)
		while(!synchroTiles.containsAll(tiles)){
			emit(evt)
			Thread.sleep(500)
		}
	}
	
	on MoveDone{
		synchro
		emit(new AskPosition)
	}
	
	on SendPosition {
        EcoNPuzzleUtils.setBoard(occurrence.posCase-1,occurrence.posTile)
        
        if(occurrence.isAggressed)
            EcoNPuzzleUtils.setAgress(occurrence.posCase-1,1)
        else
            EcoNPuzzleUtils.setAgress(occurrence.posCase-1,0)
            
        if(occurrence.isLeader)
            EcoNPuzzleUtils.setLeader(occurrence.posTile)
        
        if(occurrence.isBlankTile)
            EcoNPuzzleUtils.setBlankTile(occurrence.posTile)
    }




	
	on Destroy{
		emit(new KillMessage)
	}
}