package utbm.ia54.projet.^agent

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.UUID
import utbm.ia54.projet.message.AggressionMessage
import utbm.ia54.projet.message.AskSynchroMessage
import utbm.ia54.projet.message.BecomeSatisfied
import utbm.ia54.projet.message.BlockMessage
import utbm.ia54.projet.message.BlockResponse
import utbm.ia54.projet.message.FindBlank
import utbm.ia54.projet.message.FindGoal
import utbm.ia54.projet.message.GradientMessage
import utbm.ia54.projet.message.KillMessage
import utbm.ia54.projet.message.PathMessage
import utbm.ia54.projet.message.SatisfiedResponse
import utbm.ia54.projet.message.SynchroResponse
import utbm.ia54.projet.message.UnblockMessage
import utbm.ia54.projet.message.UnblockResponse

/**
 * @author Lucas
 *
 */
agent EcoPlace extends EcoAgent{
	uses DefaultContextInteractions, Lifecycle,Behaviors
	
	var space : OpenEventSpace 
	var spaceUUID : UUID
	var possiblePath = new ArrayList<UUID>
	var tileIsAggressing = false
	var tileIsAggressed = false
	
	//test
	on BlockMessage{
		this.state = SatisfactionState.BLOCKED
		emit(new BlockResponse, Scopes.addresses(defaultSpace.getAddress(idLinked)))
	}
	
	on UnblockMessage{
		this.state = SatisfactionState.UNSATISFIED
		emit(new UnblockResponse, Scopes.addresses(defaultSpace.getAddress(idLinked)))
	}
	
	//endTest
	
	on Initialize {
		// Initialize parameters
		position = occurrence.parameters.get(0) as Integer
		puzzleSize = occurrence.parameters.get(1) as Integer
		spaceUUID = occurrence.parameters.get(2) as UUID
		
		space = defaultContext.getOrCreateSpaceWithID(
			spaceUUID,
			typeof(OpenEventSpaceSpecification)
		);
		for(s as UUID : occurrence.parameters.get(3) as ArrayList<UUID>){
			defaultContext.getOrCreateSpaceWithID(
				s,
				typeof(OpenEventSpaceSpecification)
			).register(asEventListener())
		}
	}
	
	
	//synchro with tile
	on AskSynchroMessage{
		isSynchro = false
		idLinked = occurrence.idTile
		tileGoal = occurrence.tileGoal
		tileIsAggressing = false
		emit(new SynchroResponse(ID,position),Scopes.addresses(defaultSpace.getAddress(idLinked)))
		tileIsAggressed = false
		isSynchro = true	
	}
	
	on AggressionMessage[isSynchro && !tileIsAggressed]{
		tileIsAggressed = true
		emit(occurrence, Scopes.addresses(defaultSpace.getAddress(idLinked)))
	}
	
	//path finding
	//finding path to blank tile
	on FindBlank[tileGoal == puzzleSize*puzzleSize]{
		var path = new ArrayList<UUID>
		path.add(this.ID)
		space.emit(new GradientMessage(occurrence.src,path))
	}
	
	//finding goal place
	on FindGoal[position == occurrence.goal]{
		var path = new ArrayList<UUID>
		path.add(this.ID)
		space.emit(new GradientMessage(occurrence.src, path))
	}
	
	on GradientMessage[!tileIsAggressing && state == SatisfactionState.UNSATISFIED && idLinked != occurrence.askedBy]{
		if(!occurrence.path.contains(this.ID)){
			var path = new ArrayList<UUID>
			path.addAll(occurrence.path)
			path.add(this.ID)
			space.emit(new GradientMessage(occurrence.askedBy, path))
		}
	}
	
	on GradientMessage[state == SatisfactionState.UNSATISFIED && idLinked == occurrence.askedBy]{
		if(possiblePath.size == 0 && occurrence.path.size > 0){
			possiblePath = occurrence.path.clone as ArrayList<UUID>
			Thread.sleep(500)
			tileIsAggressing = true
			emit(new PathMessage(possiblePath.clone as ArrayList<UUID>), Scopes.addresses(defaultSpace.getAddress(idLinked)))
			possiblePath.clear
		}
		else if (possiblePath.size > occurrence.path.size && occurrence.path.size > 0){
			possiblePath = occurrence.path.clone as ArrayList<UUID>
		}
	}
	
	
	
	//SynchroSatisfaction
	on BecomeSatisfied{
		state = SatisfactionState.SATISFIED
		emit(new SatisfiedResponse, Scopes.addresses(defaultSpace.getAddress(idLinked)))
	}
	
	on KillMessage{
		killMe
	}
	
}