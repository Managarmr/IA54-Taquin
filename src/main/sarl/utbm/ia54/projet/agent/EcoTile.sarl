package utbm.ia54.projet.^agent

import io.sarl.core.AgentTask
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.util.Scopes
import java.util.ArrayList
import java.util.UUID
import utbm.ia54.projet.message.AggressionMessage
import utbm.ia54.projet.message.AskSynchroMessage
import utbm.ia54.projet.message.BecomeLeader
import utbm.ia54.projet.message.BecomeSatisfied
import utbm.ia54.projet.message.BlockMessage
import utbm.ia54.projet.message.BlockResponse
import utbm.ia54.projet.message.CornerResolutionMessage
import utbm.ia54.projet.message.ExchangeMessage
import utbm.ia54.projet.message.ExchangeResponse
import utbm.ia54.projet.message.FindBlank
import utbm.ia54.projet.message.FindGoal
import utbm.ia54.projet.message.FleeAggressionMessage
import utbm.ia54.projet.message.IsEveryoneSynchro
import utbm.ia54.projet.message.IsSynchro
import utbm.ia54.projet.message.KillMessage
import utbm.ia54.projet.message.LeaderAggressionMessage
import utbm.ia54.projet.message.MoveDone
import utbm.ia54.projet.message.PathMessage
import utbm.ia54.projet.message.PlacedOn
import utbm.ia54.projet.message.SatisfiedResponse
import utbm.ia54.projet.message.SynchroResponse
import utbm.ia54.projet.message.UnblockMessage
import utbm.ia54.projet.message.UnblockResponse
import utbm.ia54.projet.message.AskPosition
import utbm.ia54.projet.message.SendPosition

agent EcoTile extends EcoAgent{

	uses Lifecycle, DefaultContextInteractions, Schedules, InnerContextAccess
	
	var isLeader = false
	var isAggressing = false
	var isAggressed = false
	var isBlankTile : boolean
	var cornerSolved  = false
	var cornerResolutionStep = 0
	
	
	//initializing
	on Initialize {
		// Initialize parameters
		tileGoal = occurrence.parameters.get(0) as Integer
		puzzleSize = occurrence.parameters.get(1) as Integer
		isBlankTile = tileGoal == puzzleSize*puzzleSize
	}
	
	on PlacedOn {
		synchronizeWith(occurrence.idPlace)
	}
	
//	Synchro with place
	var synchroTask : AgentTask
	
	def synchronizeWith(id : UUID){
		isSynchro = false
		idLinked = null
		position = null
		synchroTask = task("synchro with place")
		synchroTask.every(200)[
			emit(new AskSynchroMessage(ID, tileGoal), Scopes.addresses(defaultSpace.getAddress(id)))
		]
	}
	
	on SynchroResponse{
		idLinked = occurrence.idPlace
		position = occurrence.position
		stopSynchroLoop
	}
	
	def stopSynchroLoop{
		if(synchroTask !== null) synchroTask.cancel
		isSynchro = true
		if(isLeader && cornerResolutionStep == 0) {live}
		else if(isLeader && cornerResolutionStep != 0) {cornerResolution}
		if(isBlankTile) {emit(new MoveDone)}
	}
	
	on IsEveryoneSynchro[isSynchro]{
		emit(new IsSynchro(this.ID))
	}	
	
	// test exchange with blank
	on ExchangeMessage{	
		stopAggression
		isAggressed = false
		emit(new ExchangeResponse(idLinked), Scopes.addresses(defaultSpace.getAddress(occurrence.idTile)))
		synchronizeWith(occurrence.idPlace)
	}
	
	on ExchangeResponse{
		isAggressed = false
		synchronizeWith(occurrence.idPlace)
	}
	
	//aggression
	var taskAggro : AgentTask
	
	def aggressForBlank(path : ArrayList<UUID>){
		isAggressing = true
		taskAggro = task("aggression")
		taskAggro.every(200)[
			var pathEvt = path.clone as ArrayList<UUID>
			var target = pathEvt.remove(pathEvt.size-1)
			emit(new FleeAggressionMessage(this.ID, pathEvt), Scopes.addresses(defaultSpace.getAddress(target)))
		]
	}
	
	def aggressForGoal(path : ArrayList<UUID>){
		isAggressing = true
		taskAggro = task("aggression")
		taskAggro.every(200)[
			var target = path.get(path.size-1)
			emit(new LeaderAggressionMessage(this.ID), Scopes.addresses(defaultSpace.getAddress(target)))
		]
	}
	
	def stopAggression{
		isAggressing = false
		if(taskAggro !== null) taskAggro.cancel
	}
	
	on AggressionMessage[isSynchro && isBlankTile]{
		emit(new ExchangeMessage(this.idLinked, this.ID), Scopes.addresses(defaultSpace.getAddress(occurrence.aggressorID)))
	}
	
	on FleeAggressionMessage[isSynchro && !isBlankTile && isAggressing == false]{
		var path = occurrence.path.clone as ArrayList<UUID>
		isAggressed = true
		aggressForBlank(path)
	}
	
	on LeaderAggressionMessage[isSynchro && !isBlankTile && isAggressing == false]{
		isAggressed = true
		emit(new FindBlank(this.ID))
	}
	
	//path receiving
	on PathMessage[!isAggressing && !isLeader]{
		var path = occurrence.path.clone as ArrayList<UUID>
		aggressForBlank(path)
	}
	
	on PathMessage[!isAggressing && isLeader]{
		var path = occurrence.path.clone as ArrayList<UUID>
		aggressForGoal(path)
	}
	
	//leadership management
	on BecomeLeader[occurrence.tileGoal == this.tileGoal]{
		isLeader = true
		live
	}
	
	def computeNextLeader : int{
		var nextLeader = 0
		if(!isBlankTile){
			var xPos = (tileGoal-1)%puzzleSize
			var yPos = (tileGoal-xPos-1)/puzzleSize
			// on est en train de placer les tuiles de la ligne supÃ©rieure
			if(xPos > yPos){
				xPos--;
			}
			// on place les tuiles de la colone gauche
			else if(yPos < puzzleSize-1){
				yPos++;
			}
			else {
				yPos = xPos+1
				xPos = puzzleSize-1
			}
			nextLeader = yPos*puzzleSize+xPos +1
		}
		if(nextLeader == puzzleSize*puzzleSize){
			nextLeader = 0
		}
		return nextLeader
		
	}
	
	//block and unblock tile and place	
	var taskBlock : AgentTask
	
	def block{
		this.state = SatisfactionState.BLOCKED
		taskBlock = task("blockPlace")
		taskBlock.every(200)[
			emit(new BlockMessage, Scopes.addresses(defaultSpace.getAddress(idLinked)))
		]
	}
	
	def unblock{
		this.state = SatisfactionState.UNSATISFIED
		taskBlock = task("unblockPlace")
		taskBlock.every(200)[
			emit(new UnblockMessage, Scopes.addresses(defaultSpace.getAddress(idLinked)))
		]
	}

	on BlockResponse{
		if(taskBlock !== null) taskBlock.cancel
		var nextTile : Integer
		if(tileGoal%(puzzleSize+1) == 1){
			nextTile = tileGoal+1
		} else if (tileGoal%(puzzleSize+1) == 2){
			nextTile = tileGoal-1
		} else if((tileGoal-((tileGoal-1)%puzzleSize))/puzzleSize == puzzleSize-1){
			nextTile = tileGoal-puzzleSize
		} else if((tileGoal-((tileGoal-1)%puzzleSize))/puzzleSize == puzzleSize-2){
			nextTile = tileGoal+puzzleSize
		}
		
		isLeader = false
		var nextStep = cornerResolutionStep+1
		cornerResolutionStep = 0
		emit(new CornerResolutionMessage(nextTile, nextStep))
	}
	
	on UnblockResponse[!cornerSolved]{
		if(taskBlock !== null) taskBlock.cancel
		cornerResolution
	}

	on UnblockResponse[cornerSolved]{
		if(taskBlock !== null) taskBlock.cancel
		live
	}
	
	//corner resolution
	on CornerResolutionMessage[occurrence.targetGoal == tileGoal && !cornerSolved]{
		isLeader = true
		cornerResolutionStep = occurrence.step
		cornerResolution
	}
	
	on CornerResolutionMessage[occurrence.targetGoal == tileGoal && cornerSolved]{
		innerContext.defaultSpace.emit(new BecomeLeader(this.tileGoal))
	}
	
	def cornerResolution{
		if(tileGoal%(puzzleSize+1) == 1 || tileGoal%(puzzleSize+1) == 2){
			topLeftCornerResolution
		} else if((tileGoal-((tileGoal-1)%puzzleSize))/puzzleSize == puzzleSize-1 
			|| (tileGoal-((tileGoal-1)%puzzleSize))/puzzleSize == puzzleSize-2){
			bottomLeftCornerResolution
		}
	}
	
	def topLeftCornerResolution{
		if(state == SatisfactionState.BLOCKED || state == SatisfactionState.SATISFIED){
			unblock
		}
		else {
			if(cornerResolutionStep == 1){
				if(position != tileGoal+(2*puzzleSize)){
					emit(new FindGoal(this.ID, this.tileGoal+(2*puzzleSize)))
				} else {
					block
				}
			} else if(cornerResolutionStep == 2){
				if(position != tileGoal-1){
					emit(new FindGoal(this.ID, this.tileGoal-1))
				} else {
					cornerSolved = true
					block
				}
			} else if(cornerResolutionStep == 3){
				if(position != tileGoal+puzzleSize){
					emit(new FindGoal(this.ID, tileGoal+puzzleSize))
				}
				else {
					cornerSolved = true
					block
				}
			}
		}
	}
		
	def bottomLeftCornerResolution{
		if(state == SatisfactionState.BLOCKED || state == SatisfactionState.SATISFIED){
			unblock
		}
		else {
			if(cornerResolutionStep == 1){
				if(position != tileGoal+2){
					emit(new FindGoal(this.ID, this.tileGoal+2))
				} else {
					block
				}
			} else if(cornerResolutionStep == 2){
				if(position != tileGoal+puzzleSize){
					emit(new FindGoal(this.ID, this.tileGoal+puzzleSize))
				} else {
					cornerSolved = true
					block
				}
			} else if(cornerResolutionStep == 3){
				if(position != tileGoal+1){
					emit(new FindGoal(this.ID, tileGoal+1))
				}
				else {
					cornerSolved = true
					block
				}
			}
		}
	}
	
	// general resolution
	def live{
		var xPos = (tileGoal-1)%puzzleSize
		var yPos = (tileGoal-xPos)/puzzleSize
		if(state == SatisfactionState.BLOCKED) {
			unblock
		} else if(tileGoal%(puzzleSize+1) == 1 && yPos < puzzleSize-2 && position != tileGoal && !cornerSolved) {
			cornerResolutionStep = 1
			cornerResolution
		} else if(yPos == puzzleSize-1 && xPos < puzzleSize-2 && position != tileGoal && !cornerSolved){
			cornerResolutionStep = 1
			cornerResolution
		} else {
			if(tileGoal == position){
				becomeSatisfied
			}
			else{
				emit(new FindGoal(this.ID, this.tileGoal))
			}
		}
	}
		
	on SatisfactionSynchro{
		isLeader = false
		var nextLeader = computeNextLeader
		if(nextLeader != 0)	emit(new BecomeLeader(nextLeader))
	}
	
	//synchro satisfaction 
	var taskSatisfying : AgentTask
	
	def becomeSatisfied{
		this.state = SatisfactionState.SATISFIED
		taskSatisfying = task("synchronizing satisfaction state")
		taskSatisfying.every(200)[
			emit(new BecomeSatisfied, Scopes.addresses(defaultSpace.getAddress(this.idLinked)))
		]
	}
	
	on SatisfiedResponse{
		if(taskSatisfying !== null) taskSatisfying.cancel
		fireSatisfactionSynchro
	}
	
	def fireSatisfactionSynchro{
		innerContext.defaultSpace.emit(new SatisfactionSynchro)
	}
	
	//GUI message
	on AskPosition{
		emit(new SendPosition(this.position, this.tileGoal, this.isLeader, this.isBlankTile, this.isAggressed))
	}
	
	
	on KillMessage{
		killMe
	}
}

event Synchro

event SynchroAggro

event SatisfactionSynchro
