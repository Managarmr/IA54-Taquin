/**
 * 
 */
package utbm.ia54.tp1.exo3

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID

/**
 * @author Lucas
 *
 */

agent PingAgent {
	uses Logging, DefaultContextInteractions, Schedules, Behaviors
	
	
	var space : OpenEventSpace
	
	on Initialize {
		space = defaultContext.getOrCreateSpaceWithSpec(
			typeof(OpenEventSpaceSpecification),
			occurrence.parameters.get(0) as UUID
		)
		space.register(asEventListener())
		println("waiting for Pong Agent")
		val taskVar = task("waiting_for_partner")
		taskVar.every(1000)[
			if(defaultSpace.participants.size > 1){
				println("Pong Agent detected.")
				println("sending Ping #0")
				var evt = new Ping(0)
				evt.source = space.getAddress(getID)
				space.emit(evt)
				taskVar.cancel
			}
		]
	}
	
	on Pong{
		println("Pong received #" + occurrence.index)
		var evt = new Ping(occurrence.index +1)
		evt.source = space.getAddress(getID)
		println("Ping sent #" + evt.index)
		space.emit(evt)
	}
}